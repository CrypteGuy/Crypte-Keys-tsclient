/// <reference types="node" />
import { ServiceClient } from '@grpc/grpc-js/build/src/make-client';
import { ClientDuplexStream, ClientReadableStream } from '@grpc/grpc-js/build/src/call';
import { EventEmitter } from 'events';
import * as keys from './keys';
import { Logger } from 'ts-log';
export declare type RPCError = {
    name: string;
    message: string;
    code: number;
    details: string;
};
export declare class KeysService extends EventEmitter {
    serviceFn: () => ServiceClient;
    client?: ServiceClient;
    log: Logger;
    constructor(serviceFn: () => ServiceClient);
    service(): ServiceClient;
    emitError(err: RPCError): void;
    keyGenerate(req: keys.KeyGenerateRequest): Promise<keys.KeyGenerateResponse>;
    keys(req: keys.KeysRequest): Promise<keys.KeysResponse>;
    key(req: keys.KeyRequest): Promise<keys.KeyResponse>;
    keyImport(req: keys.KeyImportRequest): Promise<keys.KeyImportResponse>;
    keyExport(req: keys.KeyExportRequest): Promise<keys.KeyExportResponse>;
    keyRemove(req: keys.KeyRemoveRequest): Promise<keys.KeyRemoveResponse>;
    sign(req: keys.SignRequest): Promise<keys.SignResponse>;
    signFile(): ClientDuplexStream<keys.SignFileInput, keys.SignFileOutput>;
    signStream(): ClientDuplexStream<keys.SignInput, keys.SignOutput>;
    verify(req: keys.VerifyRequest): Promise<keys.VerifyResponse>;
    verifyFile(): ClientDuplexStream<keys.VerifyFileInput, keys.VerifyFileOutput>;
    verifyStream(): ClientDuplexStream<keys.VerifyInput, keys.VerifyOutput>;
    verifyDetached(req: keys.VerifyDetachedRequest): Promise<keys.VerifyDetachedResponse>;
    verifyDetachedFile(req: keys.VerifyDetachedFileInput): Promise<keys.VerifyDetachedResponse>;
    verifyDetachedStream(req: keys.VerifyDetachedInput): Promise<keys.VerifyDetachedResponse>;
    encrypt(req: keys.EncryptRequest): Promise<keys.EncryptResponse>;
    encryptStream(): ClientDuplexStream<keys.EncryptInput, keys.EncryptOutput>;
    encryptFile(): ClientDuplexStream<keys.EncryptFileInput, keys.EncryptFileOutput>;
    decrypt(req: keys.DecryptRequest): Promise<keys.DecryptResponse>;
    decryptStream(): ClientDuplexStream<keys.DecryptInput, keys.DecryptOutput>;
    decryptFile(): ClientDuplexStream<keys.DecryptFileInput, keys.DecryptFileOutput>;
    sigchain(req: keys.SigchainRequest): Promise<keys.SigchainResponse>;
    statement(req: keys.StatementRequest): Promise<keys.StatementResponse>;
    statementCreate(req: keys.StatementCreateRequest): Promise<keys.StatementCreateResponse>;
    statementRevoke(req: keys.StatementRevokeRequest): Promise<keys.StatementRevokeResponse>;
    user(req: keys.UserRequest): Promise<keys.UserResponse>;
    userSearch(req: keys.UserSearchRequest): Promise<keys.UserSearchResponse>;
    userService(req: keys.UserServiceRequest): Promise<keys.UserServiceResponse>;
    userSign(req: keys.UserSignRequest): Promise<keys.UserSignResponse>;
    userAdd(req: keys.UserAddRequest): Promise<keys.UserAddResponse>;
    search(req: keys.SearchRequest): Promise<keys.SearchResponse>;
    secret(req: keys.SecretRequest): Promise<keys.SecretResponse>;
    secretSave(req: keys.SecretSaveRequest): Promise<keys.SecretSaveResponse>;
    secretRemove(req: keys.SecretRemoveRequest): Promise<keys.SecretRemoveResponse>;
    secrets(req: keys.SecretsRequest): Promise<keys.SecretsResponse>;
    pull(req: keys.PullRequest): Promise<keys.PullResponse>;
    push(req: keys.PushRequest): Promise<keys.PushResponse>;
    wormhole(): ClientDuplexStream<keys.WormholeInput, keys.WormholeOutput>;
    authSetup(req: keys.AuthSetupRequest): Promise<keys.AuthSetupResponse>;
    authVault(req: keys.AuthVaultRequest): Promise<keys.AuthVaultResponse>;
    authUnlock(req: keys.AuthUnlockRequest): Promise<keys.AuthUnlockResponse>;
    authLock(req: keys.AuthLockRequest): Promise<keys.AuthLockResponse>;
    authReset(req: keys.AuthResetRequest): Promise<keys.AuthResetResponse>;
    authRecover(req: keys.AuthRecoverRequest): Promise<keys.AuthRecoverResponse>;
    runtimeStatus(req: keys.RuntimeStatusRequest): Promise<keys.RuntimeStatusResponse>;
    rand(req: keys.RandRequest): Promise<keys.RandResponse>;
    randPassword(req: keys.RandPasswordRequest): Promise<keys.RandPasswordResponse>;
    authProvision(req: keys.AuthProvisionRequest): Promise<keys.AuthProvisionResponse>;
    authDeprovision(req: keys.AuthDeprovisionRequest): Promise<keys.AuthDeprovisionResponse>;
    authProvisions(req: keys.AuthProvisionsRequest): Promise<keys.AuthProvisionsResponse>;
    authPasswordChange(req: keys.AuthPasswordChangeRequest): Promise<keys.AuthPasswordChangeResponse>;
    vaultAuth(req: keys.VaultAuthRequest): Promise<keys.VaultAuthResponse>;
    vaultSync(req: keys.VaultSyncRequest): Promise<keys.VaultSyncResponse>;
    vaultUnsync(req: keys.VaultUnsyncRequest): Promise<keys.VaultUnsyncResponse>;
    vaultStatus(req: keys.VaultStatusRequest): Promise<keys.VaultStatusResponse>;
    vaultUpdate(req: keys.VaultUpdateRequest): Promise<keys.VaultUpdateResponse>;
    collections(req: keys.CollectionsRequest): Promise<keys.CollectionsResponse>;
    documents(req: keys.DocumentsRequest): Promise<keys.DocumentsResponse>;
    documentDelete(req: keys.DocumentDeleteRequest): Promise<keys.DocumentDeleteResponse>;
    configGet(req: keys.ConfigGetRequest): Promise<keys.ConfigGetResponse>;
    configSet(req: keys.ConfigSetRequest): Promise<keys.ConfigSetResponse>;
    adminSignURL(req: keys.AdminSignURLRequest): Promise<keys.AdminSignURLResponse>;
    adminCheck(req: keys.AdminCheckRequest): Promise<keys.AdminCheckResponse>;
    channels(req: keys.ChannelsRequest): Promise<keys.ChannelsResponse>;
    channelCreate(req: keys.ChannelCreateRequest): Promise<keys.ChannelCreateResponse>;
    messagePrepare(req: keys.MessagePrepareRequest): Promise<keys.MessagePrepareResponse>;
    messageCreate(req: keys.MessageCreateRequest): Promise<keys.MessageCreateResponse>;
    messages(req: keys.MessagesRequest): Promise<keys.MessagesResponse>;
    relay(req: keys.RelayRequest): ClientReadableStream<keys.RelayOutput>;
}
