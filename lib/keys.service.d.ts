/// <reference types="node" />
import { ServiceClient } from '@grpc/grpc-js/build/src/make-client';
import { ClientDuplexStream } from '@grpc/grpc-js/build/src/call';
import { EventEmitter } from 'events';
import * as keys from './keys';
export declare type RPCError = {
    name: string;
    message: string;
    code: number;
    details: string;
};
export declare class KeysService extends EventEmitter {
    service: ServiceClient;
    constructor(service: ServiceClient);
    emitError(err: RPCError): void;
    KeyGenerate(req: keys.KeyGenerateRequest): Promise<keys.KeyGenerateResponse>;
    Keys(req: keys.KeysRequest): Promise<keys.KeysResponse>;
    Key(req: keys.KeyRequest): Promise<keys.KeyResponse>;
    KeyImport(req: keys.KeyImportRequest): Promise<keys.KeyImportResponse>;
    KeyExport(req: keys.KeyExportRequest): Promise<keys.KeyExportResponse>;
    KeyRemove(req: keys.KeyRemoveRequest): Promise<keys.KeyRemoveResponse>;
    Sign(req: keys.SignRequest): Promise<keys.SignResponse>;
    SignFile(): ClientDuplexStream<keys.SignFileInput, keys.SignFileOutput>;
    SignStream(): ClientDuplexStream<keys.SignInput, keys.SignOutput>;
    Verify(req: keys.VerifyRequest): Promise<keys.VerifyResponse>;
    VerifyFile(): ClientDuplexStream<keys.VerifyFileInput, keys.VerifyFileOutput>;
    VerifyStream(): ClientDuplexStream<keys.VerifyInput, keys.VerifyOutput>;
    VerifyDetached(req: keys.VerifyDetachedRequest): Promise<keys.VerifyDetachedResponse>;
    VerifyDetachedFile(req: keys.VerifyDetachedFileInput): Promise<keys.VerifyDetachedResponse>;
    VerifyDetachedStream(req: keys.VerifyDetachedInput): Promise<keys.VerifyDetachedResponse>;
    Encrypt(req: keys.EncryptRequest): Promise<keys.EncryptResponse>;
    EncryptStream(): ClientDuplexStream<keys.EncryptInput, keys.EncryptOutput>;
    EncryptFile(): ClientDuplexStream<keys.EncryptFileInput, keys.EncryptFileOutput>;
    Decrypt(req: keys.DecryptRequest): Promise<keys.DecryptResponse>;
    DecryptStream(): ClientDuplexStream<keys.DecryptInput, keys.DecryptOutput>;
    DecryptFile(): ClientDuplexStream<keys.DecryptFileInput, keys.DecryptFileOutput>;
    Sigchain(req: keys.SigchainRequest): Promise<keys.SigchainResponse>;
    Statement(req: keys.StatementRequest): Promise<keys.StatementResponse>;
    StatementCreate(req: keys.StatementCreateRequest): Promise<keys.StatementCreateResponse>;
    StatementRevoke(req: keys.StatementRevokeRequest): Promise<keys.StatementRevokeResponse>;
    User(req: keys.UserRequest): Promise<keys.UserResponse>;
    UserSearch(req: keys.UserSearchRequest): Promise<keys.UserSearchResponse>;
    UserService(req: keys.UserServiceRequest): Promise<keys.UserServiceResponse>;
    UserSign(req: keys.UserSignRequest): Promise<keys.UserSignResponse>;
    UserAdd(req: keys.UserAddRequest): Promise<keys.UserAddResponse>;
    Search(req: keys.SearchRequest): Promise<keys.SearchResponse>;
    Secret(req: keys.SecretRequest): Promise<keys.SecretResponse>;
    SecretSave(req: keys.SecretSaveRequest): Promise<keys.SecretSaveResponse>;
    SecretRemove(req: keys.SecretRemoveRequest): Promise<keys.SecretRemoveResponse>;
    Secrets(req: keys.SecretsRequest): Promise<keys.SecretsResponse>;
    Pull(req: keys.PullRequest): Promise<keys.PullResponse>;
    Push(req: keys.PushRequest): Promise<keys.PushResponse>;
    Wormhole(): ClientDuplexStream<keys.WormholeInput, keys.WormholeOutput>;
    AuthSetup(req: keys.AuthSetupRequest): Promise<keys.AuthSetupResponse>;
    AuthVault(req: keys.AuthVaultRequest): Promise<keys.AuthVaultResponse>;
    AuthUnlock(req: keys.AuthUnlockRequest): Promise<keys.AuthUnlockResponse>;
    AuthLock(req: keys.AuthLockRequest): Promise<keys.AuthLockResponse>;
    AuthReset(req: keys.AuthResetRequest): Promise<keys.AuthResetResponse>;
    AuthRecover(req: keys.AuthRecoverRequest): Promise<keys.AuthRecoverResponse>;
    RuntimeStatus(req: keys.RuntimeStatusRequest): Promise<keys.RuntimeStatusResponse>;
    Rand(req: keys.RandRequest): Promise<keys.RandResponse>;
    RandPassword(req: keys.RandPasswordRequest): Promise<keys.RandPasswordResponse>;
    AuthProvision(req: keys.AuthProvisionRequest): Promise<keys.AuthProvisionResponse>;
    AuthDeprovision(req: keys.AuthDeprovisionRequest): Promise<keys.AuthDeprovisionResponse>;
    AuthProvisions(req: keys.AuthProvisionsRequest): Promise<keys.AuthProvisionsResponse>;
    AuthPasswordChange(req: keys.AuthPasswordChangeRequest): Promise<keys.AuthPasswordChangeResponse>;
    VaultAuth(req: keys.VaultAuthRequest): Promise<keys.VaultAuthResponse>;
    VaultSync(req: keys.VaultSyncRequest): Promise<keys.VaultSyncResponse>;
    VaultUnsync(req: keys.VaultUnsyncRequest): Promise<keys.VaultUnsyncResponse>;
    VaultStatus(req: keys.VaultStatusRequest): Promise<keys.VaultStatusResponse>;
    VaultUpdate(req: keys.VaultUpdateRequest): Promise<keys.VaultUpdateResponse>;
    Collections(req: keys.CollectionsRequest): Promise<keys.CollectionsResponse>;
    Documents(req: keys.DocumentsRequest): Promise<keys.DocumentsResponse>;
    DocumentDelete(req: keys.DocumentDeleteRequest): Promise<keys.DocumentDeleteResponse>;
    ConfigGet(req: keys.ConfigGetRequest): Promise<keys.ConfigGetResponse>;
    ConfigSet(req: keys.ConfigSetRequest): Promise<keys.ConfigSetResponse>;
    AdminSignURL(req: keys.AdminSignURLRequest): Promise<keys.AdminSignURLResponse>;
    AdminCheck(req: keys.AdminCheckRequest): Promise<keys.AdminCheckResponse>;
    MessagePrepare(req: keys.MessagePrepareRequest): Promise<keys.MessagePrepareResponse>;
    MessageCreate(req: keys.MessageCreateRequest): Promise<keys.MessageCreateResponse>;
    Messages(req: keys.MessagesRequest): Promise<keys.MessagesResponse>;
}
