/// <reference types="node" />
import { ServiceClient } from '@grpc/grpc-js/build/src/make-client';
import { ClientDuplexStream, ClientReadableStream } from '@grpc/grpc-js/build/src/call';
import { EventEmitter } from 'events';
import * as service from './rpc';
import { Logger } from 'ts-log';
export declare type RPCError = {
    name: string;
    message: string;
    code: number;
    details: string;
};
export declare class RPCService extends EventEmitter {
    serviceFn: () => ServiceClient;
    client?: ServiceClient;
    log: Logger;
    constructor(serviceFn: () => ServiceClient);
    service(): ServiceClient;
    emitError(err: RPCError): void;
    keyGenerate(req: service.KeyGenerateRequest): Promise<service.KeyGenerateResponse>;
    keys(req: service.KeysRequest): Promise<service.KeysResponse>;
    key(req: service.KeyRequest): Promise<service.KeyResponse>;
    keyImport(req: service.KeyImportRequest): Promise<service.KeyImportResponse>;
    keyExport(req: service.KeyExportRequest): Promise<service.KeyExportResponse>;
    keyRemove(req: service.KeyRemoveRequest): Promise<service.KeyRemoveResponse>;
    sign(req: service.SignRequest): Promise<service.SignResponse>;
    signFile(): ClientDuplexStream<service.SignFileInput, service.SignFileOutput>;
    signStream(): ClientDuplexStream<service.SignInput, service.SignOutput>;
    verify(req: service.VerifyRequest): Promise<service.VerifyResponse>;
    verifyFile(): ClientDuplexStream<service.VerifyFileInput, service.VerifyFileOutput>;
    verifyStream(): ClientDuplexStream<service.VerifyInput, service.VerifyOutput>;
    verifyDetached(req: service.VerifyDetachedRequest): Promise<service.VerifyDetachedResponse>;
    verifyDetachedFile(req: service.VerifyDetachedFileInput): Promise<service.VerifyDetachedResponse>;
    verifyDetachedStream(req: service.VerifyDetachedInput): Promise<service.VerifyDetachedResponse>;
    encrypt(req: service.EncryptRequest): Promise<service.EncryptResponse>;
    encryptStream(): ClientDuplexStream<service.EncryptInput, service.EncryptOutput>;
    encryptFile(): ClientDuplexStream<service.EncryptFileInput, service.EncryptFileOutput>;
    decrypt(req: service.DecryptRequest): Promise<service.DecryptResponse>;
    decryptStream(): ClientDuplexStream<service.DecryptInput, service.DecryptOutput>;
    decryptFile(): ClientDuplexStream<service.DecryptFileInput, service.DecryptFileOutput>;
    sigchain(req: service.SigchainRequest): Promise<service.SigchainResponse>;
    statement(req: service.StatementRequest): Promise<service.StatementResponse>;
    statementCreate(req: service.StatementCreateRequest): Promise<service.StatementCreateResponse>;
    statementRevoke(req: service.StatementRevokeRequest): Promise<service.StatementRevokeResponse>;
    user(req: service.UserRequest): Promise<service.UserResponse>;
    userSearch(req: service.UserSearchRequest): Promise<service.UserSearchResponse>;
    userService(req: service.UserServiceRequest): Promise<service.UserServiceResponse>;
    userSign(req: service.UserSignRequest): Promise<service.UserSignResponse>;
    userAdd(req: service.UserAddRequest): Promise<service.UserAddResponse>;
    search(req: service.SearchRequest): Promise<service.SearchResponse>;
    secret(req: service.SecretRequest): Promise<service.SecretResponse>;
    secretSave(req: service.SecretSaveRequest): Promise<service.SecretSaveResponse>;
    secretRemove(req: service.SecretRemoveRequest): Promise<service.SecretRemoveResponse>;
    secrets(req: service.SecretsRequest): Promise<service.SecretsResponse>;
    pull(req: service.PullRequest): Promise<service.PullResponse>;
    push(req: service.PushRequest): Promise<service.PushResponse>;
    wormhole(): ClientDuplexStream<service.WormholeInput, service.WormholeOutput>;
    authSetup(req: service.AuthSetupRequest): Promise<service.AuthSetupResponse>;
    authVault(req: service.AuthVaultRequest): Promise<service.AuthVaultResponse>;
    authUnlock(req: service.AuthUnlockRequest): Promise<service.AuthUnlockResponse>;
    authLock(req: service.AuthLockRequest): Promise<service.AuthLockResponse>;
    authReset(req: service.AuthResetRequest): Promise<service.AuthResetResponse>;
    authRecover(req: service.AuthRecoverRequest): Promise<service.AuthRecoverResponse>;
    runtimeStatus(req: service.RuntimeStatusRequest): Promise<service.RuntimeStatusResponse>;
    rand(req: service.RandRequest): Promise<service.RandResponse>;
    randPassword(req: service.RandPasswordRequest): Promise<service.RandPasswordResponse>;
    authProvision(req: service.AuthProvisionRequest): Promise<service.AuthProvisionResponse>;
    authDeprovision(req: service.AuthDeprovisionRequest): Promise<service.AuthDeprovisionResponse>;
    authProvisions(req: service.AuthProvisionsRequest): Promise<service.AuthProvisionsResponse>;
    authPasswordChange(req: service.AuthPasswordChangeRequest): Promise<service.AuthPasswordChangeResponse>;
    vaultAuth(req: service.VaultAuthRequest): Promise<service.VaultAuthResponse>;
    vaultSync(req: service.VaultSyncRequest): Promise<service.VaultSyncResponse>;
    vaultUnsync(req: service.VaultUnsyncRequest): Promise<service.VaultUnsyncResponse>;
    vaultStatus(req: service.VaultStatusRequest): Promise<service.VaultStatusResponse>;
    vaultUpdate(req: service.VaultUpdateRequest): Promise<service.VaultUpdateResponse>;
    collections(req: service.CollectionsRequest): Promise<service.CollectionsResponse>;
    documents(req: service.DocumentsRequest): Promise<service.DocumentsResponse>;
    documentDelete(req: service.DocumentDeleteRequest): Promise<service.DocumentDeleteResponse>;
    configGet(req: service.ConfigGetRequest): Promise<service.ConfigGetResponse>;
    configSet(req: service.ConfigSetRequest): Promise<service.ConfigSetResponse>;
    adminSignURL(req: service.AdminSignURLRequest): Promise<service.AdminSignURLResponse>;
    adminCheck(req: service.AdminCheckRequest): Promise<service.AdminCheckResponse>;
    channels(req: service.ChannelsRequest): Promise<service.ChannelsResponse>;
    channelCreate(req: service.ChannelCreateRequest): Promise<service.ChannelCreateResponse>;
    channelInvite(req: service.ChannelInviteRequest): Promise<service.ChannelInviteResponse>;
    channelLeave(req: service.ChannelLeaveRequest): Promise<service.ChannelLeaveResponse>;
    channelRead(req: service.ChannelReadRequest): Promise<service.ChannelReadResponse>;
    follow(req: service.FollowRequest): Promise<service.FollowResponse>;
    follows(req: service.FollowsRequest): Promise<service.FollowsResponse>;
    messagePrepare(req: service.MessagePrepareRequest): Promise<service.MessagePrepareResponse>;
    messageCreate(req: service.MessageCreateRequest): Promise<service.MessageCreateResponse>;
    messages(req: service.MessagesRequest): Promise<service.MessagesResponse>;
    relay(req: service.RelayRequest): ClientReadableStream<service.RelayOutput>;
}
