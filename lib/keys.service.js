"use strict";
// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: 26f5331ee0a8887edc0677dc564e8496f1fed9fd
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeysService = void 0;
const grpc = __importStar(require("@grpc/grpc-js"));
const events_1 = require("events");
const ts_log_1 = require("ts-log");
class KeysService extends events_1.EventEmitter {
    constructor(serviceFn) {
        super();
        this.log = ts_log_1.dummyLogger;
        this.serviceFn = serviceFn;
    }
    service() {
        if (!this.client) {
            this.client = this.serviceFn();
        }
        return this.client;
    }
    emitError(err) {
        switch (err.code) {
            case grpc.status.PERMISSION_DENIED:
            case grpc.status.UNAUTHENTICATED:
                this.emit('unauthenticated', err);
                break;
            case grpc.status.UNAVAILABLE:
                this.emit('unavailable', err);
                break;
            default:
                this.emit('error', err);
                break;
        }
    }
    KeyGenerate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('KeyGenerate');
            this.service().KeyGenerate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Keys(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Keys');
            this.service().Keys(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Key(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Key');
            this.service().Key(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    KeyImport(req) {
        return new Promise((resolve, reject) => {
            this.log.info('KeyImport');
            this.service().KeyImport(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    KeyExport(req) {
        return new Promise((resolve, reject) => {
            this.log.info('KeyExport');
            this.service().KeyExport(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    KeyRemove(req) {
        return new Promise((resolve, reject) => {
            this.log.info('KeyRemove');
            this.service().KeyRemove(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Sign(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Sign');
            this.service().Sign(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    SignFile() {
        return this.service().SignFile();
    }
    SignStream() {
        return this.service().SignStream();
    }
    Verify(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Verify');
            this.service().Verify(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    VerifyFile() {
        return this.service().VerifyFile();
    }
    VerifyStream() {
        return this.service().VerifyStream();
    }
    VerifyDetached(req) {
        return new Promise((resolve, reject) => {
            this.log.info('VerifyDetached');
            this.service().VerifyDetached(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    VerifyDetachedFile(req) {
        return new Promise((resolve, reject) => {
            this.log.info('VerifyDetachedFile');
            this.service().VerifyDetachedFile(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    VerifyDetachedStream(req) {
        return new Promise((resolve, reject) => {
            this.log.info('VerifyDetachedStream');
            this.service().VerifyDetachedStream(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Encrypt(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Encrypt');
            this.service().Encrypt(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    EncryptStream() {
        return this.service().EncryptStream();
    }
    EncryptFile() {
        return this.service().EncryptFile();
    }
    Decrypt(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Decrypt');
            this.service().Decrypt(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    DecryptStream() {
        return this.service().DecryptStream();
    }
    DecryptFile() {
        return this.service().DecryptFile();
    }
    Sigchain(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Sigchain');
            this.service().Sigchain(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Statement(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Statement');
            this.service().Statement(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    StatementCreate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('StatementCreate');
            this.service().StatementCreate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    StatementRevoke(req) {
        return new Promise((resolve, reject) => {
            this.log.info('StatementRevoke');
            this.service().StatementRevoke(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    User(req) {
        return new Promise((resolve, reject) => {
            this.log.info('User');
            this.service().User(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    UserSearch(req) {
        return new Promise((resolve, reject) => {
            this.log.info('UserSearch');
            this.service().UserSearch(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    UserService(req) {
        return new Promise((resolve, reject) => {
            this.log.info('UserService');
            this.service().UserService(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    UserSign(req) {
        return new Promise((resolve, reject) => {
            this.log.info('UserSign');
            this.service().UserSign(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    UserAdd(req) {
        return new Promise((resolve, reject) => {
            this.log.info('UserAdd');
            this.service().UserAdd(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Search(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Search');
            this.service().Search(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Secret(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Secret');
            this.service().Secret(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    SecretSave(req) {
        return new Promise((resolve, reject) => {
            this.log.info('SecretSave');
            this.service().SecretSave(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    SecretRemove(req) {
        return new Promise((resolve, reject) => {
            this.log.info('SecretRemove');
            this.service().SecretRemove(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Secrets(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Secrets');
            this.service().Secrets(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Pull(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Pull');
            this.service().Pull(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Push(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Push');
            this.service().Push(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Wormhole() {
        return this.service().Wormhole();
    }
    AuthSetup(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthSetup');
            this.service().AuthSetup(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AuthVault(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthVault');
            this.service().AuthVault(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AuthUnlock(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthUnlock');
            this.service().AuthUnlock(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AuthLock(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthLock');
            this.service().AuthLock(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AuthReset(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthReset');
            this.service().AuthReset(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AuthRecover(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthRecover');
            this.service().AuthRecover(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    RuntimeStatus(req) {
        return new Promise((resolve, reject) => {
            this.log.info('RuntimeStatus');
            this.service().RuntimeStatus(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Rand(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Rand');
            this.service().Rand(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    RandPassword(req) {
        return new Promise((resolve, reject) => {
            this.log.info('RandPassword');
            this.service().RandPassword(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AuthProvision(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthProvision');
            this.service().AuthProvision(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AuthDeprovision(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthDeprovision');
            this.service().AuthDeprovision(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AuthProvisions(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthProvisions');
            this.service().AuthProvisions(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AuthPasswordChange(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AuthPasswordChange');
            this.service().AuthPasswordChange(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    VaultAuth(req) {
        return new Promise((resolve, reject) => {
            this.log.info('VaultAuth');
            this.service().VaultAuth(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    VaultSync(req) {
        return new Promise((resolve, reject) => {
            this.log.info('VaultSync');
            this.service().VaultSync(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    VaultUnsync(req) {
        return new Promise((resolve, reject) => {
            this.log.info('VaultUnsync');
            this.service().VaultUnsync(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    VaultStatus(req) {
        return new Promise((resolve, reject) => {
            this.log.info('VaultStatus');
            this.service().VaultStatus(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    VaultUpdate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('VaultUpdate');
            this.service().VaultUpdate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Collections(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Collections');
            this.service().Collections(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Documents(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Documents');
            this.service().Documents(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    DocumentDelete(req) {
        return new Promise((resolve, reject) => {
            this.log.info('DocumentDelete');
            this.service().DocumentDelete(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    ConfigGet(req) {
        return new Promise((resolve, reject) => {
            this.log.info('ConfigGet');
            this.service().ConfigGet(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    ConfigSet(req) {
        return new Promise((resolve, reject) => {
            this.log.info('ConfigSet');
            this.service().ConfigSet(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Channels(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Channels');
            this.service().Channels(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    ChannelCreate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('ChannelCreate');
            this.service().ChannelCreate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    ChannelInvitesCreate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('ChannelInvitesCreate');
            this.service().ChannelInvitesCreate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    ChannelInviteAccept(req) {
        return new Promise((resolve, reject) => {
            this.log.info('ChannelInviteAccept');
            this.service().ChannelInviteAccept(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    MessagePrepare(req) {
        return new Promise((resolve, reject) => {
            this.log.info('MessagePrepare');
            this.service().MessagePrepare(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    MessageCreate(req) {
        return new Promise((resolve, reject) => {
            this.log.info('MessageCreate');
            this.service().MessageCreate(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Messages(req) {
        return new Promise((resolve, reject) => {
            this.log.info('Messages');
            this.service().Messages(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AdminSignURL(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AdminSignURL');
            this.service().AdminSignURL(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    AdminCheck(req) {
        return new Promise((resolve, reject) => {
            this.log.info('AdminCheck');
            this.service().AdminCheck(req, (err, resp) => {
                if (err) {
                    reject(err);
                    this.emitError(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    Relay() {
        return this.service().Relay();
    }
}
exports.KeysService = KeysService;
//# sourceMappingURL=keys.service.js.map