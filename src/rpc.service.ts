// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: 410f608057207886f528cf6cf2f38a5674877177

import {ServiceClient} from '@grpc/grpc-js/build/src/make-client'
import {ClientDuplexStream, ClientReadableStream} from '@grpc/grpc-js/build/src/call'
import * as grpc from '@grpc/grpc-js'
import {EventEmitter} from 'events'
import * as service from './rpc'
import {dummyLogger, Logger} from 'ts-log'

export type RPCError = {
  name: string
  message: string
  code: number
  details: string
}

export class RPCService extends EventEmitter {
  serviceFn: () => ServiceClient
  client?: ServiceClient
  log: Logger = dummyLogger
  
  constructor(serviceFn: () => ServiceClient) {
    super()
    this.serviceFn = serviceFn
  }

  service(): ServiceClient {
    if (!this.client) {
      this.client = this.serviceFn()
    }
    return this.client
  }

  emitError(err: RPCError) {
    switch (err.code) {
      case grpc.status.PERMISSION_DENIED:
      case grpc.status.UNAUTHENTICATED:
        this.emit('unauthenticated', err)
        break
      case grpc.status.UNAVAILABLE:
        this.emit('unavailable', err)
        break
      default:
        this.emit('error', err)
        break
	}
  }

  keyGenerate(req: service.KeyGenerateRequest): Promise<service.KeyGenerateResponse> {
    return new Promise<service.KeyGenerateResponse>((resolve, reject) => {
      this.log.info('keyGenerate')
      this.service().keyGenerate(req, (err: RPCError, resp: service.KeyGenerateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keys(req: service.KeysRequest): Promise<service.KeysResponse> {
    return new Promise<service.KeysResponse>((resolve, reject) => {
      this.log.info('keys')
      this.service().keys(req, (err: RPCError, resp: service.KeysResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  key(req: service.KeyRequest): Promise<service.KeyResponse> {
    return new Promise<service.KeyResponse>((resolve, reject) => {
      this.log.info('key')
      this.service().key(req, (err: RPCError, resp: service.KeyResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyImport(req: service.KeyImportRequest): Promise<service.KeyImportResponse> {
    return new Promise<service.KeyImportResponse>((resolve, reject) => {
      this.log.info('keyImport')
      this.service().keyImport(req, (err: RPCError, resp: service.KeyImportResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyExport(req: service.KeyExportRequest): Promise<service.KeyExportResponse> {
    return new Promise<service.KeyExportResponse>((resolve, reject) => {
      this.log.info('keyExport')
      this.service().keyExport(req, (err: RPCError, resp: service.KeyExportResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  keyRemove(req: service.KeyRemoveRequest): Promise<service.KeyRemoveResponse> {
    return new Promise<service.KeyRemoveResponse>((resolve, reject) => {
      this.log.info('keyRemove')
      this.service().keyRemove(req, (err: RPCError, resp: service.KeyRemoveResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  sign(req: service.SignRequest): Promise<service.SignResponse> {
    return new Promise<service.SignResponse>((resolve, reject) => {
      this.log.info('sign')
      this.service().sign(req, (err: RPCError, resp: service.SignResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  signFile(): ClientDuplexStream<service.SignFileInput, service.SignFileOutput> {
    this.log.info('signFile')
    return this.service().signFile()
  }

  signStream(): ClientDuplexStream<service.SignInput, service.SignOutput> {
    this.log.info('signStream')
    return this.service().signStream()
  }

  verify(req: service.VerifyRequest): Promise<service.VerifyResponse> {
    return new Promise<service.VerifyResponse>((resolve, reject) => {
      this.log.info('verify')
      this.service().verify(req, (err: RPCError, resp: service.VerifyResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  verifyFile(): ClientDuplexStream<service.VerifyFileInput, service.VerifyFileOutput> {
    this.log.info('verifyFile')
    return this.service().verifyFile()
  }

  verifyStream(): ClientDuplexStream<service.VerifyInput, service.VerifyOutput> {
    this.log.info('verifyStream')
    return this.service().verifyStream()
  }

  verifyDetached(req: service.VerifyDetachedRequest): Promise<service.VerifyDetachedResponse> {
    return new Promise<service.VerifyDetachedResponse>((resolve, reject) => {
      this.log.info('verifyDetached')
      this.service().verifyDetached(req, (err: RPCError, resp: service.VerifyDetachedResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  verifyDetachedFile(req: service.VerifyDetachedFileInput): Promise<service.VerifyDetachedResponse> {
    return new Promise<service.VerifyDetachedResponse>((resolve, reject) => {
      this.log.info('verifyDetachedFile')
      this.service().verifyDetachedFile(req, (err: RPCError, resp: service.VerifyDetachedResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  verifyDetachedStream(req: service.VerifyDetachedInput): Promise<service.VerifyDetachedResponse> {
    return new Promise<service.VerifyDetachedResponse>((resolve, reject) => {
      this.log.info('verifyDetachedStream')
      this.service().verifyDetachedStream(req, (err: RPCError, resp: service.VerifyDetachedResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  encrypt(req: service.EncryptRequest): Promise<service.EncryptResponse> {
    return new Promise<service.EncryptResponse>((resolve, reject) => {
      this.log.info('encrypt')
      this.service().encrypt(req, (err: RPCError, resp: service.EncryptResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  encryptStream(): ClientDuplexStream<service.EncryptInput, service.EncryptOutput> {
    this.log.info('encryptStream')
    return this.service().encryptStream()
  }

  encryptFile(): ClientDuplexStream<service.EncryptFileInput, service.EncryptFileOutput> {
    this.log.info('encryptFile')
    return this.service().encryptFile()
  }

  decrypt(req: service.DecryptRequest): Promise<service.DecryptResponse> {
    return new Promise<service.DecryptResponse>((resolve, reject) => {
      this.log.info('decrypt')
      this.service().decrypt(req, (err: RPCError, resp: service.DecryptResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  decryptStream(): ClientDuplexStream<service.DecryptInput, service.DecryptOutput> {
    this.log.info('decryptStream')
    return this.service().decryptStream()
  }

  decryptFile(): ClientDuplexStream<service.DecryptFileInput, service.DecryptFileOutput> {
    this.log.info('decryptFile')
    return this.service().decryptFile()
  }

  sigchain(req: service.SigchainRequest): Promise<service.SigchainResponse> {
    return new Promise<service.SigchainResponse>((resolve, reject) => {
      this.log.info('sigchain')
      this.service().sigchain(req, (err: RPCError, resp: service.SigchainResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  statement(req: service.StatementRequest): Promise<service.StatementResponse> {
    return new Promise<service.StatementResponse>((resolve, reject) => {
      this.log.info('statement')
      this.service().statement(req, (err: RPCError, resp: service.StatementResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  statementCreate(req: service.StatementCreateRequest): Promise<service.StatementCreateResponse> {
    return new Promise<service.StatementCreateResponse>((resolve, reject) => {
      this.log.info('statementCreate')
      this.service().statementCreate(req, (err: RPCError, resp: service.StatementCreateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  statementRevoke(req: service.StatementRevokeRequest): Promise<service.StatementRevokeResponse> {
    return new Promise<service.StatementRevokeResponse>((resolve, reject) => {
      this.log.info('statementRevoke')
      this.service().statementRevoke(req, (err: RPCError, resp: service.StatementRevokeResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  user(req: service.UserRequest): Promise<service.UserResponse> {
    return new Promise<service.UserResponse>((resolve, reject) => {
      this.log.info('user')
      this.service().user(req, (err: RPCError, resp: service.UserResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userSearch(req: service.UserSearchRequest): Promise<service.UserSearchResponse> {
    return new Promise<service.UserSearchResponse>((resolve, reject) => {
      this.log.info('userSearch')
      this.service().userSearch(req, (err: RPCError, resp: service.UserSearchResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userService(req: service.UserServiceRequest): Promise<service.UserServiceResponse> {
    return new Promise<service.UserServiceResponse>((resolve, reject) => {
      this.log.info('userService')
      this.service().userService(req, (err: RPCError, resp: service.UserServiceResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userSign(req: service.UserSignRequest): Promise<service.UserSignResponse> {
    return new Promise<service.UserSignResponse>((resolve, reject) => {
      this.log.info('userSign')
      this.service().userSign(req, (err: RPCError, resp: service.UserSignResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  userAdd(req: service.UserAddRequest): Promise<service.UserAddResponse> {
    return new Promise<service.UserAddResponse>((resolve, reject) => {
      this.log.info('userAdd')
      this.service().userAdd(req, (err: RPCError, resp: service.UserAddResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  search(req: service.SearchRequest): Promise<service.SearchResponse> {
    return new Promise<service.SearchResponse>((resolve, reject) => {
      this.log.info('search')
      this.service().search(req, (err: RPCError, resp: service.SearchResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  secret(req: service.SecretRequest): Promise<service.SecretResponse> {
    return new Promise<service.SecretResponse>((resolve, reject) => {
      this.log.info('secret')
      this.service().secret(req, (err: RPCError, resp: service.SecretResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  secretSave(req: service.SecretSaveRequest): Promise<service.SecretSaveResponse> {
    return new Promise<service.SecretSaveResponse>((resolve, reject) => {
      this.log.info('secretSave')
      this.service().secretSave(req, (err: RPCError, resp: service.SecretSaveResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  secretRemove(req: service.SecretRemoveRequest): Promise<service.SecretRemoveResponse> {
    return new Promise<service.SecretRemoveResponse>((resolve, reject) => {
      this.log.info('secretRemove')
      this.service().secretRemove(req, (err: RPCError, resp: service.SecretRemoveResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  secrets(req: service.SecretsRequest): Promise<service.SecretsResponse> {
    return new Promise<service.SecretsResponse>((resolve, reject) => {
      this.log.info('secrets')
      this.service().secrets(req, (err: RPCError, resp: service.SecretsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  pull(req: service.PullRequest): Promise<service.PullResponse> {
    return new Promise<service.PullResponse>((resolve, reject) => {
      this.log.info('pull')
      this.service().pull(req, (err: RPCError, resp: service.PullResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  push(req: service.PushRequest): Promise<service.PushResponse> {
    return new Promise<service.PushResponse>((resolve, reject) => {
      this.log.info('push')
      this.service().push(req, (err: RPCError, resp: service.PushResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  wormhole(): ClientDuplexStream<service.WormholeInput, service.WormholeOutput> {
    this.log.info('wormhole')
    return this.service().wormhole()
  }

  authSetup(req: service.AuthSetupRequest): Promise<service.AuthSetupResponse> {
    return new Promise<service.AuthSetupResponse>((resolve, reject) => {
      this.log.info('authSetup')
      this.service().authSetup(req, (err: RPCError, resp: service.AuthSetupResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authVault(req: service.AuthVaultRequest): Promise<service.AuthVaultResponse> {
    return new Promise<service.AuthVaultResponse>((resolve, reject) => {
      this.log.info('authVault')
      this.service().authVault(req, (err: RPCError, resp: service.AuthVaultResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authUnlock(req: service.AuthUnlockRequest): Promise<service.AuthUnlockResponse> {
    return new Promise<service.AuthUnlockResponse>((resolve, reject) => {
      this.log.info('authUnlock')
      this.service().authUnlock(req, (err: RPCError, resp: service.AuthUnlockResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authLock(req: service.AuthLockRequest): Promise<service.AuthLockResponse> {
    return new Promise<service.AuthLockResponse>((resolve, reject) => {
      this.log.info('authLock')
      this.service().authLock(req, (err: RPCError, resp: service.AuthLockResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authReset(req: service.AuthResetRequest): Promise<service.AuthResetResponse> {
    return new Promise<service.AuthResetResponse>((resolve, reject) => {
      this.log.info('authReset')
      this.service().authReset(req, (err: RPCError, resp: service.AuthResetResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authRecover(req: service.AuthRecoverRequest): Promise<service.AuthRecoverResponse> {
    return new Promise<service.AuthRecoverResponse>((resolve, reject) => {
      this.log.info('authRecover')
      this.service().authRecover(req, (err: RPCError, resp: service.AuthRecoverResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  runtimeStatus(req: service.RuntimeStatusRequest): Promise<service.RuntimeStatusResponse> {
    return new Promise<service.RuntimeStatusResponse>((resolve, reject) => {
      this.log.info('runtimeStatus')
      this.service().runtimeStatus(req, (err: RPCError, resp: service.RuntimeStatusResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  rand(req: service.RandRequest): Promise<service.RandResponse> {
    return new Promise<service.RandResponse>((resolve, reject) => {
      this.log.info('rand')
      this.service().rand(req, (err: RPCError, resp: service.RandResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  randPassword(req: service.RandPasswordRequest): Promise<service.RandPasswordResponse> {
    return new Promise<service.RandPasswordResponse>((resolve, reject) => {
      this.log.info('randPassword')
      this.service().randPassword(req, (err: RPCError, resp: service.RandPasswordResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authProvision(req: service.AuthProvisionRequest): Promise<service.AuthProvisionResponse> {
    return new Promise<service.AuthProvisionResponse>((resolve, reject) => {
      this.log.info('authProvision')
      this.service().authProvision(req, (err: RPCError, resp: service.AuthProvisionResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authDeprovision(req: service.AuthDeprovisionRequest): Promise<service.AuthDeprovisionResponse> {
    return new Promise<service.AuthDeprovisionResponse>((resolve, reject) => {
      this.log.info('authDeprovision')
      this.service().authDeprovision(req, (err: RPCError, resp: service.AuthDeprovisionResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authProvisions(req: service.AuthProvisionsRequest): Promise<service.AuthProvisionsResponse> {
    return new Promise<service.AuthProvisionsResponse>((resolve, reject) => {
      this.log.info('authProvisions')
      this.service().authProvisions(req, (err: RPCError, resp: service.AuthProvisionsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  authPasswordChange(req: service.AuthPasswordChangeRequest): Promise<service.AuthPasswordChangeResponse> {
    return new Promise<service.AuthPasswordChangeResponse>((resolve, reject) => {
      this.log.info('authPasswordChange')
      this.service().authPasswordChange(req, (err: RPCError, resp: service.AuthPasswordChangeResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  vaultAuth(req: service.VaultAuthRequest): Promise<service.VaultAuthResponse> {
    return new Promise<service.VaultAuthResponse>((resolve, reject) => {
      this.log.info('vaultAuth')
      this.service().vaultAuth(req, (err: RPCError, resp: service.VaultAuthResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  vaultSync(req: service.VaultSyncRequest): Promise<service.VaultSyncResponse> {
    return new Promise<service.VaultSyncResponse>((resolve, reject) => {
      this.log.info('vaultSync')
      this.service().vaultSync(req, (err: RPCError, resp: service.VaultSyncResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  vaultUnsync(req: service.VaultUnsyncRequest): Promise<service.VaultUnsyncResponse> {
    return new Promise<service.VaultUnsyncResponse>((resolve, reject) => {
      this.log.info('vaultUnsync')
      this.service().vaultUnsync(req, (err: RPCError, resp: service.VaultUnsyncResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  vaultStatus(req: service.VaultStatusRequest): Promise<service.VaultStatusResponse> {
    return new Promise<service.VaultStatusResponse>((resolve, reject) => {
      this.log.info('vaultStatus')
      this.service().vaultStatus(req, (err: RPCError, resp: service.VaultStatusResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  vaultUpdate(req: service.VaultUpdateRequest): Promise<service.VaultUpdateResponse> {
    return new Promise<service.VaultUpdateResponse>((resolve, reject) => {
      this.log.info('vaultUpdate')
      this.service().vaultUpdate(req, (err: RPCError, resp: service.VaultUpdateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  collections(req: service.CollectionsRequest): Promise<service.CollectionsResponse> {
    return new Promise<service.CollectionsResponse>((resolve, reject) => {
      this.log.info('collections')
      this.service().collections(req, (err: RPCError, resp: service.CollectionsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  documents(req: service.DocumentsRequest): Promise<service.DocumentsResponse> {
    return new Promise<service.DocumentsResponse>((resolve, reject) => {
      this.log.info('documents')
      this.service().documents(req, (err: RPCError, resp: service.DocumentsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  documentDelete(req: service.DocumentDeleteRequest): Promise<service.DocumentDeleteResponse> {
    return new Promise<service.DocumentDeleteResponse>((resolve, reject) => {
      this.log.info('documentDelete')
      this.service().documentDelete(req, (err: RPCError, resp: service.DocumentDeleteResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  configGet(req: service.ConfigGetRequest): Promise<service.ConfigGetResponse> {
    return new Promise<service.ConfigGetResponse>((resolve, reject) => {
      this.log.info('configGet')
      this.service().configGet(req, (err: RPCError, resp: service.ConfigGetResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  configSet(req: service.ConfigSetRequest): Promise<service.ConfigSetResponse> {
    return new Promise<service.ConfigSetResponse>((resolve, reject) => {
      this.log.info('configSet')
      this.service().configSet(req, (err: RPCError, resp: service.ConfigSetResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  adminSignURL(req: service.AdminSignURLRequest): Promise<service.AdminSignURLResponse> {
    return new Promise<service.AdminSignURLResponse>((resolve, reject) => {
      this.log.info('adminSignURL')
      this.service().adminSignURL(req, (err: RPCError, resp: service.AdminSignURLResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  adminCheck(req: service.AdminCheckRequest): Promise<service.AdminCheckResponse> {
    return new Promise<service.AdminCheckResponse>((resolve, reject) => {
      this.log.info('adminCheck')
      this.service().adminCheck(req, (err: RPCError, resp: service.AdminCheckResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channels(req: service.ChannelsRequest): Promise<service.ChannelsResponse> {
    return new Promise<service.ChannelsResponse>((resolve, reject) => {
      this.log.info('channels')
      this.service().channels(req, (err: RPCError, resp: service.ChannelsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channelCreate(req: service.ChannelCreateRequest): Promise<service.ChannelCreateResponse> {
    return new Promise<service.ChannelCreateResponse>((resolve, reject) => {
      this.log.info('channelCreate')
      this.service().channelCreate(req, (err: RPCError, resp: service.ChannelCreateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channelInvite(req: service.ChannelInviteRequest): Promise<service.ChannelInviteResponse> {
    return new Promise<service.ChannelInviteResponse>((resolve, reject) => {
      this.log.info('channelInvite')
      this.service().channelInvite(req, (err: RPCError, resp: service.ChannelInviteResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channelLeave(req: service.ChannelLeaveRequest): Promise<service.ChannelLeaveResponse> {
    return new Promise<service.ChannelLeaveResponse>((resolve, reject) => {
      this.log.info('channelLeave')
      this.service().channelLeave(req, (err: RPCError, resp: service.ChannelLeaveResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  channelRead(req: service.ChannelReadRequest): Promise<service.ChannelReadResponse> {
    return new Promise<service.ChannelReadResponse>((resolve, reject) => {
      this.log.info('channelRead')
      this.service().channelRead(req, (err: RPCError, resp: service.ChannelReadResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  follow(req: service.FollowRequest): Promise<service.FollowResponse> {
    return new Promise<service.FollowResponse>((resolve, reject) => {
      this.log.info('follow')
      this.service().follow(req, (err: RPCError, resp: service.FollowResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  follows(req: service.FollowsRequest): Promise<service.FollowsResponse> {
    return new Promise<service.FollowsResponse>((resolve, reject) => {
      this.log.info('follows')
      this.service().follows(req, (err: RPCError, resp: service.FollowsResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  messagePrepare(req: service.MessagePrepareRequest): Promise<service.MessagePrepareResponse> {
    return new Promise<service.MessagePrepareResponse>((resolve, reject) => {
      this.log.info('messagePrepare')
      this.service().messagePrepare(req, (err: RPCError, resp: service.MessagePrepareResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  messageCreate(req: service.MessageCreateRequest): Promise<service.MessageCreateResponse> {
    return new Promise<service.MessageCreateResponse>((resolve, reject) => {
      this.log.info('messageCreate')
      this.service().messageCreate(req, (err: RPCError, resp: service.MessageCreateResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  messages(req: service.MessagesRequest): Promise<service.MessagesResponse> {
    return new Promise<service.MessagesResponse>((resolve, reject) => {
      this.log.info('messages')
      this.service().messages(req, (err: RPCError, resp: service.MessagesResponse) => {
        if (err) {
          reject(err)
          this.emitError(err)
          return
        }
        resolve(resp)
      })		
    })
  }

  relay(req: service.RelayRequest): ClientReadableStream<service.RelayOutput> {
    this.log.info('relay')
    return this.service().relay(req)
  }
}
